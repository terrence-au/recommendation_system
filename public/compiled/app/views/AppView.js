// Generated by CoffeeScript 1.12.2
(function () {
  var extend = function (child, parent) {
      for (var key in parent) {
        if (hasProp.call(parent, key)) child[key] = parent[key];
      }
      function ctor() {
        this.constructor = child;
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor();
      child.__super__ = parent.prototype;
      return child;
    },
    hasProp = {}.hasOwnProperty;

  window.AppView = (function (superClass) {
    extend(AppView, superClass);

    function AppView() {
      return AppView.__super__.constructor.apply(this, arguments);
    }

    AppView.prototype.loginTemplate = '<div class="loginpage"> </div>';

    AppView.prototype.recommendationTemplate =
      '<div class="container-fluid"> <div class="row"> <div id="sidebar"> sidebar testing </div> <div id="main"> body testing </div> </div> <div class="rlink" id="powered"><a href="https://github.com/guymorita/recommendationRaccoon" target="_blank">Powered by recommendationRaccoon (Node.js Module)</a></div> </div>';

    AppView.prototype.initialize = function () {
      this.render();
      return this.loginView.on(
        "userInfoReceived",
        (function (_this) {
          return function (userObject) {
            var index, movie, movieHash, ref, ref1, user, userHash;
            _this.$el.html("");
            movieHash = {};
            ref = userObject.allMovies;
            for (index in ref) {
              movie = ref[index];
              movieHash[movie.id] = movie.name;
            }
            userHash = {};
            ref1 = userObject.allUsers;
            for (index in ref1) {
              user = ref1[index];
              userHash[user.id] = user.name;
            }
            userObject["movieLookup"] = movieHash;
            userObject["userLookup"] = userHash;
            _(_this.model.get("movieList")).extend({
              userObj: userObject,
            });
            _(_this.model.get("recommendationList")).extend({
              userObj: userObject,
            });
            _this.$el.append(_this.recommendationTemplate);
            _this.movieView = new MovieListView({
              model: _this.model.get("movieList"),
            });
            _this.$("#sidebar").html(_this.movieView.el);
            _this.recommendationView = new RecommendationView({
              model: _this.model.get("recommendationList"),
            });
            _this.$("#main").html(_this.recommendationView.el);
            return _this.movieView.on("newRating", function (ratingObject) {
              return _this.recommendationView.handleRating(ratingObject);
            });
          };
        })(this)
      );
    };

    AppView.prototype.render = function () {
      this.$el.append(this.loginTemplate);
      this.loginView = new LoginView({
        model: this.model.get("loginInfo"),
      });
      return this.$(".loginpage").html(this.loginView.el);
    };

    return AppView;
  })(Backbone.View);
}.call(this));
