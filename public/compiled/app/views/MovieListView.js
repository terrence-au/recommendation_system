// Generated by CoffeeScript 1.12.2
(function () {
  var extend = function (child, parent) {
      for (var key in parent) {
        if (hasProp.call(parent, key)) child[key] = parent[key];
      }
      function ctor() {
        this.constructor = child;
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor();
      child.__super__ = parent.prototype;
      return child;
    },
    hasProp = {}.hasOwnProperty;

  window.MovieListView = (function (superClass) {
    extend(MovieListView, superClass);

    function MovieListView() {
      return MovieListView.__super__.constructor.apply(this, arguments);
    }

    MovieListView.prototype.template = `<div> 
        <h2>Item Lists</h2> 
          <div class="container products">
        </div>        
      </div>`;

    MovieListView.prototype.initialize = function () {
      return this.render();
    };

    MovieListView.prototype.events = {
      "click .btn": function (e) {
        if (e.currentTarget.classList[0] !== "notseen") {
          this.newRating(e.currentTarget.id, e.currentTarget.classList[0]);
        }
        return this.$("#" + e.currentTarget.id).hide("slow");
      },
    };

    MovieListView.prototype.newRating = function (id, like) {
      console.log("id", id, like);
      return this.trigger("newRating", {
        id: id,
        like: like,
      });
    };

    MovieListView.prototype.render = function () {
      var index, movie, ref, results;
      this.$el.append(this.template);
      ref = _.shuffle(this.model.userObj.allMovies);
      results = [];
      for (index in ref) {
        movie = ref[index];
        results.push(
          this.$(".products").append(
            `
            <div class="sprites product-wrapper" id="${movie.id}">
              <div class="product">
                <div class="product__imgwrapper">
                  <div class="product__img ${movie.name
                    .replace(/\s/g, "")
                    .toLowerCase()}">
                  </div>
                </div>
                <div class="product__name">${movie.name}</div>
              </div>
                <div class="product__buttons">
                  <button type="button" class="liked" id="${
                    movie.id
                  }">                  
                    <i class="fas fa-heart"></i>
                  </button>
                  <button type="button" class="disliked" id="${movie.id}">
                    <i class="fas fa-heart-broken"></i>
                  </button>
                </div>
                <button type="button" class="notseen" id="${movie.id}">
                  <span>skip this</span>
                </button>              
            </div>
            `
          )
        );
      }
      return results;
    };

    return MovieListView;
  })(Backbone.View);
}.call(this));

// // Generated by CoffeeScript 1.12.2
// (function () {
//   var extend = function (child, parent) {
//       for (var key in parent) {
//         if (hasProp.call(parent, key)) child[key] = parent[key];
//       }
//       function ctor() {
//         this.constructor = child;
//       }
//       ctor.prototype = parent.prototype;
//       child.prototype = new ctor();
//       child.__super__ = parent.prototype;
//       return child;
//     },
//     hasProp = {}.hasOwnProperty;

//   window.MovieListView = (function (superClass) {
//     extend(MovieListView, superClass);

//     function MovieListView() {
//       return MovieListView.__super__.constructor.apply(this, arguments);
//     }

//     MovieListView.prototype.template =
//       '<div> <h2>Item Lists</h2> <div class="scrollBox"> <tbody> <table class="table"> </table> </tbody> </div> </div>';

//     MovieListView.prototype.initialize = function () {
//       return this.render();
//     };

//     MovieListView.prototype.events = {
//       "click .btn": function (e) {
//         if (e.currentTarget.classList[0] !== "notseen") {
//           this.newRating(e.currentTarget.id, e.currentTarget.classList[0]);
//         }
//         return this.$("#" + e.currentTarget.id).hide("slow");
//       },
//     };

//     MovieListView.prototype.newRating = function (id, like) {
//       console.log("id", id, like);
//       return this.trigger("newRating", {
//         id: id,
//         like: like,
//       });
//     };

//     MovieListView.prototype.render = function () {
//       var index, movie, ref, results;
//       this.$el.append(this.template);
//       ref = _.shuffle(this.model.userObj.allMovies);
//       results = [];
//       for (index in ref) {
//         movie = ref[index];
//         results.push(
//           this.$(".table").append(
//             '<tr class="sprites"id="' +
//               movie.id +
//               '"><td>' +
//               movie.name +
//               '<div  style="width: 1000px; height: 700px; background-size: cover;background-repeat: no-repeat;background-position: center center;" class="' +
//               movie.name.replace(/\s/g, "").toLowerCase() +
//               '"></div></td> <td> <button type="button" class="liked btn btn-success btn-xs" id="' +
//               movie.id +
//               '"><i class="icon-thumbs-up"></i></button> <button type="button" class="disliked btn btn-danger btn-xs" id="' +
//               movie.id +
//               '"><i class="icon-thumbs-down"></i></button> <button type="button" class="notseen btn btn-warning btn-xs" id="' +
//               movie.id +
//               '"><i class="icon-chevron-right"></i></button> </td> </tr>'
//           )
//         );
//       }
//       return results;
//     };

//     return MovieListView;
//   })(Backbone.View);
// }.call(this));
