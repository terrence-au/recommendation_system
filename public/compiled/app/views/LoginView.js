// Generated by CoffeeScript 1.12.2
(function () {
  var extend = function (child, parent) {
      for (var key in parent) {
        if (hasProp.call(parent, key)) child[key] = parent[key];
      }
      function ctor() {
        this.constructor = child;
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor();
      child.__super__ = parent.prototype;
      return child;
    },
    hasProp = {}.hasOwnProperty;

  window.LoginView = (function (superClass) {
    extend(LoginView, superClass);

    function LoginView() {
      return LoginView.__super__.constructor.apply(this, arguments);
    }

    LoginView.prototype.template = '<div id="load"></div>';

    LoginView.prototype.initialize = function () {
      this.username = "a";
      _(this.model).extend({
        name: this.username,
      });
      return this.model.fetch({
        error: (function (_this) {
          return function (model, response) {
            return console.log("model", model);
          };
        })(this),
        success: (function (_this) {
          return function (model, response) {
            return _this.userInfoReceived(response);
          };
        })(this),
      });
    };

    LoginView.prototype.events = {
      "load #load": "checkEnter",
    };

    LoginView.prototype.checkEnter = function (e) {
      console.log("e");

      return this.getUser();
    };

    LoginView.prototype.getUser = function () {
      this.username = "a";
      _(this.model).extend({
        name: this.username,
      });
      return this.model.fetch({
        error: (function (_this) {
          return function (model, response) {
            return console.log("model", model);
          };
        })(this),
        success: (function (_this) {
          return function (model, response) {
            return _this.userInfoReceived(response);
          };
        })(this),
      });
    };

    LoginView.prototype.userInfoReceived = function (userObject) {
      return this.trigger("userInfoReceived", userObject);
    };

    LoginView.prototype.render = function () {
      return this.$el.append(this.template);
    };

    return LoginView;
  })(Backbone.View);
}.call(this));
